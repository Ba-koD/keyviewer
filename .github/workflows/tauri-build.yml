name: Tauri Build and Release

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            rust_target: 'x86_64-pc-windows-msvc'
          - platform: 'ubuntu-22.04'
            rust_target: 'x86_64-unknown-linux-gnu'
          - platform: 'macos-latest'
            rust_target: 'x86_64-apple-darwin'
          - platform: 'macos-latest'
            rust_target: 'aarch64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read version
      id: version
      shell: bash
      run: |
        version=$(cat version.txt | tr -d '\n\r')
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Version: $version"

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.rust_target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install Linux dependencies
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev

    - name: Install Tauri CLI
      run: cargo install tauri-cli

    - name: Build Tauri app
      run: cargo tauri build --target ${{ matrix.rust_target }}

    - name: Build Windows Portable
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        .\build-portable.ps1

    - name: Upload artifacts (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts-${{ steps.version.outputs.version }}
        path: |
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/msi/*.msi
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/nsis/*.exe
          dist/KBQV-Portable-*.zip

    - name: Upload artifacts (Linux)
      if: matrix.platform == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts-${{ steps.version.outputs.version }}
        path: |
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/deb/*.deb
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/appimage/*.AppImage

    - name: Upload artifacts (macOS x86_64)
      if: matrix.platform == 'macos-latest' && matrix.rust_target == 'x86_64-apple-darwin'
      uses: actions/upload-artifact@v4
      with:
        name: macos-x86_64-artifacts-${{ steps.version.outputs.version }}
        path: |
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/macos/*.app

    - name: Upload artifacts (macOS ARM64)
      if: matrix.platform == 'macos-latest' && matrix.rust_target == 'aarch64-apple-darwin'
      uses: actions/upload-artifact@v4
      with:
        name: macos-aarch64-artifacts-${{ steps.version.outputs.version }}
        path: |
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.rust_target }}/release/bundle/macos/*.app

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read version
      id: version
      run: |
        version=$(cat version.txt | tr -d '\n\r')
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Version: $version"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -R ./artifacts

    - name: Generate Changelog
      id: changelog
      run: |
        version="${{ steps.version.outputs.version }}"
        currentTag="v$version"
        
        # Find previous tag
        tags=$(git tag --sort=-version:refname | grep -v "^$currentTag$" | head -n 1)
        if [ ! -z "$tags" ]; then
            previousTag=$tags
            echo "Previous tag found: $previousTag"
            echo "previous_tag=$previousTag" >> $GITHUB_OUTPUT
            
            # Generate Full Changelog
            changelog="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...$currentTag"
            echo "full_changelog=$changelog" >> $GITHUB_OUTPUT
            echo "Generated changelog: $changelog"
        else
            echo "No previous tags found"
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "full_changelog=" >> $GITHUB_OUTPUT
        fi

    - name: Force Update Tag
      run: |
        version="${{ steps.version.outputs.version }}"
        tagName="v$version"
        
        # Remove existing tag if it exists
        if git tag -l "$tagName" | grep -q "$tagName"; then
          echo "Removing existing tag: $tagName"
          git tag -d "$tagName" || true
          git push origin ":refs/tags/$tagName" || true
        fi
        
        # Create new tag
        echo "Creating new tag: $tagName"
        git tag "$tagName"
        git push origin "$tagName"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: KeyQueueViewer v${{ steps.version.outputs.version }}
        body: |
          ## KeyQueueViewer v${{ steps.version.outputs.version }}
          
          ### 🎉 Tauri로 완전히 재작성되었습니다!
          
          **주요 개선사항:**
          - ✅ Rust + Tauri 기반으로 재작성 (PyInstaller → Tauri)
          - ✅ 바이러스 오탐 대폭 감소
          - ✅ 파일 크기 5~10배 감소 (약 10MB 이하)
          - ✅ 크로스 플랫폼 지원 (Windows, macOS, Linux)
          - ✅ 더 빠른 성능과 낮은 메모리 사용량
          - ✅ 네이티브 시스템 통합
          
          ### 📝 Latest Changes
          **Commit Message**: ${{ github.event.head_commit.message }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          #### Windows
          - **MSI Installer**: `KeyQueueViewer_*_x64_en-US.msi` - Windows Installer (recommended)
          - **NSIS Setup**: `KeyQueueViewer_*_x64-setup.exe` - Alternative installer
          - **Portable**: `KBQV-Portable-*.zip` - No installation required
          
          #### macOS
          - **Intel (x86_64)**: `KeyQueueViewer_*_x64.dmg` - For Intel Macs
          - **Apple Silicon (ARM64)**: `KeyQueueViewer_*_aarch64.dmg` - For M1/M2/M3 Macs
          
          #### Linux
          - **Debian/Ubuntu**: `keyqueueviewer_*_amd64.deb` - For Debian-based distros
          - **AppImage**: `keyqueueviewer_*_amd64.AppImage` - Universal Linux binary
          
          ### 🚀 Installation
          
          **Windows:**
          1. Download MSI or NSIS installer
          2. Run the installer
          3. Follow the installation wizard
          
          **macOS:**
          1. Download the appropriate DMG for your Mac
          2. Open the DMG
          3. Drag KeyQueueViewer to Applications
          
          **Linux:**
          - **Debian/Ubuntu**: `sudo dpkg -i keyqueueviewer_*.deb`
          - **AppImage**: Make executable and run: `chmod +x keyqueueviewer_*.AppImage && ./keyqueueviewer_*.AppImage`
          
          ### 📋 Notes
          - Built with Tauri 2.0 for optimal performance
          - No Python runtime required
          - Significantly reduced false positive detection from antivirus software
          - All platforms support the same features
          
          ### 🔗 Links
          - **Repository**: https://github.com/${{ github.repository }}
          - **Issues**: https://github.com/${{ github.repository }}/issues
          
          ### 📝 Changelog
          ${{ steps.changelog.outputs.full_changelog }}
        files: |
          ./artifacts/**/*.msi
          ./artifacts/**/*.exe
          ./artifacts/**/*.zip
          ./artifacts/**/*.deb
          ./artifacts/**/*.AppImage
          ./artifacts/**/*.dmg
          ./artifacts/**/*.app
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

