name: Tauri Build and Release

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  # Read version for all jobs
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Read version
      id: version
      run: |
        version=$(cat version.txt | tr -d '\n\r')
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Version: $version"

  # Windows Portable Build
  build-windows-portable:
    needs: prepare
    runs-on: windows-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Build Windows Portable
      shell: pwsh
      run: |
        .\build-portable.ps1

    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable-${{ needs.prepare.outputs.version }}
        path: |
          dist/KBQV-Portable-*.zip

  # Windows Installer Build (MSI/NSIS)
  build-windows-installer:
    needs: prepare
    runs-on: windows-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0.0"

    - name: Build Windows Installers
      run: cargo tauri build

    - name: Upload MSI artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: windows-msi-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/msi/*.msi

    - name: Upload NSIS artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: windows-nsis-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/nsis/*-setup.exe

  # Linux Build
  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev libxdo-dev libxcb1-dev

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0.0"

    - name: Build Linux
      run: cargo tauri build

    - name: Upload AppImage artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimage-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/appimage/*.AppImage

    - name: Upload Deb artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/deb/*.deb

  # macOS Build
  build-macos:
    needs: prepare
    runs-on: macos-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0.0"

    - name: Build macOS
      run: cargo tauri build

    - name: Upload DMG artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg

    - name: Upload App artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: macos-app-${{ needs.prepare.outputs.version }}
        path: |
          src-tauri/target/release/bundle/macos/*.app

  release:
    needs: [prepare, build-windows-portable, build-windows-installer, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
      continue-on-error: true

    - name: Check build results and create checklist
      id: check_builds
      run: |
        echo "Checking downloaded artifacts..."
        ls -R ./artifacts || echo "No artifacts directory"
        
        # Initialize checklist
        checklist=""
        
        # Check Windows Portable
        if [ -d "./artifacts/windows-portable-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/windows-portable-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ Windows Portable\n"
          echo "windows_portable=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ Windows Portable (Build Failed)\n"
          echo "windows_portable=false" >> $GITHUB_OUTPUT
        fi
        
        # Check Windows MSI
        if [ -d "./artifacts/windows-msi-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/windows-msi-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ Windows MSI Installer\n"
          echo "windows_msi=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ Windows MSI Installer (Build Failed)\n"
          echo "windows_msi=false" >> $GITHUB_OUTPUT
        fi
        
        # Check Windows NSIS
        if [ -d "./artifacts/windows-nsis-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/windows-nsis-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ Windows NSIS Installer\n"
          echo "windows_nsis=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ Windows NSIS Installer (Build Failed)\n"
          echo "windows_nsis=false" >> $GITHUB_OUTPUT
        fi
        
        # Check Linux AppImage
        if [ -d "./artifacts/linux-appimage-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/linux-appimage-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ Linux AppImage\n"
          echo "linux_appimage=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ Linux AppImage (Build Failed)\n"
          echo "linux_appimage=false" >> $GITHUB_OUTPUT
        fi
        
        # Check Linux Deb
        if [ -d "./artifacts/linux-deb-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/linux-deb-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ Linux Deb Package\n"
          echo "linux_deb=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ Linux Deb Package (Build Failed)\n"
          echo "linux_deb=false" >> $GITHUB_OUTPUT
        fi
        
        # Check macOS DMG
        if [ -d "./artifacts/macos-dmg-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/macos-dmg-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ macOS DMG\n"
          echo "macos_dmg=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ macOS DMG (Build Failed)\n"
          echo "macos_dmg=false" >> $GITHUB_OUTPUT
        fi
        
        # Check macOS App
        if [ -d "./artifacts/macos-app-${{ needs.prepare.outputs.version }}" ] && [ "$(ls -A ./artifacts/macos-app-${{ needs.prepare.outputs.version }})" ]; then
          checklist="${checklist}- ✅ macOS App Bundle\n"
          echo "macos_app=true" >> $GITHUB_OUTPUT
        else
          checklist="${checklist}- ❌ macOS App Bundle (Build Failed)\n"
          echo "macos_app=false" >> $GITHUB_OUTPUT
        fi
        
        # Save checklist (escape newlines for GitHub Actions)
        echo "checklist<<EOF" >> $GITHUB_OUTPUT
        echo -e "$checklist" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate Changelog
      id: changelog
      run: |
        version="${{ needs.prepare.outputs.version }}"
        currentTag="v$version"
        
        # Find previous tag
        tags=$(git tag --sort=-version:refname | grep -v "^$currentTag$" | head -n 1)
        if [ ! -z "$tags" ]; then
            previousTag=$tags
            echo "Previous tag found: $previousTag"
            echo "previous_tag=$previousTag" >> $GITHUB_OUTPUT
            
            # Generate Full Changelog
            changelog="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...$currentTag"
            echo "full_changelog=$changelog" >> $GITHUB_OUTPUT
            echo "Generated changelog: $changelog"
        else
            echo "No previous tags found"
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "full_changelog=" >> $GITHUB_OUTPUT
        fi

    - name: Force Update Tag
      run: |
        version="${{ needs.prepare.outputs.version }}"
        tagName="v$version"
        
        # Remove existing tag if it exists
        if git tag -l "$tagName" | grep -q "$tagName"; then
          echo "Removing existing tag: $tagName"
          git tag -d "$tagName" || true
          git push origin ":refs/tags/$tagName" || true
        fi
        
        # Create new tag
        echo "Creating new tag: $tagName"
        git tag "$tagName"
        git push origin "$tagName"
    
    - name: Prepare release files
      run: |
        mkdir -p ./release-files
        
        # Copy only successful builds
        if [ -d "./artifacts/windows-portable-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/windows-portable-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/windows-msi-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/windows-msi-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/windows-nsis-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/windows-nsis-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/linux-appimage-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/linux-appimage-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/linux-deb-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/linux-deb-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/macos-dmg-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/macos-dmg-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        if [ -d "./artifacts/macos-app-${{ needs.prepare.outputs.version }}" ]; then
          cp -r ./artifacts/macos-app-${{ needs.prepare.outputs.version }}/* ./release-files/ || true
        fi
        
        echo "Release files prepared:"
        ls -lh ./release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare.outputs.version }}
        name: KeyQueueViewer v${{ needs.prepare.outputs.version }}
        body: |
          ## KeyQueueViewer v${{ needs.prepare.outputs.version }}
          
          ### 🎉 Tauri로 완전히 재작성되었습니다!
          
          **주요 개선사항:**
          - ✅ Rust + Tauri 기반으로 재작성 (PyInstaller → Tauri)
          - ✅ 바이러스 오탐 대폭 감소
          - ✅ 파일 크기 5~10배 감소 (약 10MB 이하)
          - ✅ 더 빠른 성능과 낮은 메모리 사용량
          - ✅ 네이티브 시스템 통합
          - ✅ OBS 브라우저 소스 캐싱 문제 해결 (no-cache 헤더 추가)
          - ✅ 설정 초기화 기능 추가
          - ✅ Windows 레지스트리 기반 설정 저장
          
          ### 📝 Latest Changes
          **Commit Message**: ${{ github.event.head_commit.message }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ### 📦 Build Status
          
          ${{ steps.check_builds.outputs.checklist }}
          
          ### 📥 Downloads
          
          #### Windows
          - **Portable**: `KBQV-Portable-*.zip` - No installation required, just extract and run
          - **MSI Installer**: `KeyQueueViewer_*_x64_en-US.msi` - Standard Windows installer
          - **NSIS Installer**: `KeyQueueViewer_*_x64-setup.exe` - Alternative installer
          
          #### Linux
          - **AppImage**: `*.AppImage` - Universal Linux package
          - **Debian Package**: `*.deb` - For Debian/Ubuntu based distributions
          
          #### macOS
          - **DMG**: `*.dmg` - macOS disk image installer
          - **App Bundle**: `*.app` - macOS application bundle
          
          ### 🚀 Installation
          
          **Windows Portable:**
          1. Download `KBQV-Portable-*.zip`
          2. Extract to any folder
          3. Run `KBQV-Portable-*.exe`
          
          **Windows Installer (MSI/NSIS):**
          1. Download installer file
          2. Run the installer
          3. Follow installation wizard
          
          **Linux AppImage:**
          1. Download `*.AppImage`
          2. Make it executable: `chmod +x *.AppImage`
          3. Run: `./KeyQueueViewer*.AppImage`
          
          **Linux Deb:**
          1. Download `*.deb`
          2. Install: `sudo dpkg -i *.deb`
          
          **macOS:**
          1. Download `*.dmg`
          2. Open DMG file
          3. Drag app to Applications folder
          
          ### 📋 Notes
          - Built with Tauri 2.0 for optimal performance
          - No Python runtime required
          - Significantly reduced false positive detection from antivirus software
          - Cross-platform support (Windows, Linux, macOS)
          - Only successfully built packages are included in this release
          
          ### 🔗 Links
          - **Repository**: https://github.com/${{ github.repository }}
          - **Issues**: https://github.com/${{ github.repository }}/issues
          
          ### 📝 Changelog
          ${{ steps.changelog.outputs.full_changelog }}
        files: |
          ./release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

