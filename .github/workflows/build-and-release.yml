name: Build and Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리를 가져와서 태그 비교 가능하게 함
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Read version
      id: version
      run: |
        $version = Get-Content "version.txt" -Raw | ForEach-Object { $_.Trim() }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Version: $version"
        
    - name: Build all versions using build_all.ps1
      run: |
        # PowerShell 실행 정책 설정
        Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
        
        # build_all.ps1 스크립트 실행
        Write-Host "Starting build process with build_all.ps1..." -ForegroundColor Green
        .\build_all.ps1
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed with exit code $LASTEXITCODE" -ForegroundColor Red
            exit $LASTEXITCODE
        }
        
        Write-Host "Build completed successfully!" -ForegroundColor Green
        
    - name: List build artifacts
      run: |
        Write-Host "Build artifacts:" -ForegroundColor Green
        Get-ChildItem -Path "dist" -Recurse | ForEach-Object {
          if ($_.PSIsContainer) {
            Write-Host "  [FOLDER] $($_.Name)" -ForegroundColor White
          } else {
            Write-Host "  [FILE] $($_.Name)" -ForegroundColor White
          }
        }
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
  release:
    needs: build
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code (with tags)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리를 가져와서 태그 비교 가능하게 함
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./dist
        
    - name: Show version from build
      run: |
        echo "Release version: ${{ needs.build.outputs.version }}"
        
    - name: Generate Changelog
      id: changelog
      run: |
        $version = "${{ needs.build.outputs.version }}"
        $currentTag = "v$version"
        
        # 이전 태그 찾기 (현재 태그보다 낮은 가장 최근 태그)
        $tags = git tag --sort=-version:refname | Where-Object { $_ -lt $currentTag }
        if ($tags.Count -gt 0) {
            $previousTag = $tags[0]
            Write-Host "Previous tag found: $previousTag"
            echo "previous_tag=$previousTag" >> $env:GITHUB_OUTPUT
            
            # Full Changelog 생성
            $changelog = "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...$currentTag"
            echo "full_changelog=$changelog" >> $env:GITHUB_OUTPUT
            Write-Host "Generated changelog: $changelog"
        } else {
            Write-Host "No previous tags found"
            echo "previous_tag=" >> $env:GITHUB_OUTPUT
            echo "full_changelog=" >> $env:GITHUB_OUTPUT
        }
        
    - name: Force Update Tag
      run: |
        $version = "${{ needs.build.outputs.version }}"
        $tagName = "v$version"
        
        # 기존 태그가 있다면 삭제
        if (git tag -l $tagName) {
          Write-Host "Removing existing tag: $tagName"
          git tag -d $tagName
          git push origin :refs/tags/$tagName
        }
        
        # 새 태그 생성
        Write-Host "Creating new tag: $tagName"
        git tag $tagName
        git push origin $tagName
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Release v${{ needs.build.outputs.version }}
        body: |
          ## KeyQueueViewer v${{ needs.build.outputs.version }}
          
          ### 📝 Latest Changes
          **Commit Message**: ${{ github.event.head_commit.message }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Workflow**: ${{ github.workflow }}
          
          ### 📦 Downloads
          - **🔧 Installer**: `KBQV-Installer-${{ needs.build.outputs.version }}.exe` - Auto-installer for easy deployment
          - **💻 Portable**: `KBQV-Portable-${{ needs.build.outputs.version }}.exe` - Portable version (may trigger Windows Defender)
          - **📁 Main Program**: `KBQV-v${{ needs.build.outputs.version }}.zip` - Extract and run (recommended)
          
          ### 🚀 Installation
          1. **Recommended**: Download and extract `KBQV-v${{ needs.build.outputs.version }}.zip`
          2. **Easy Install**: Run `KBQV-Installer-${{ needs.build.outputs.version }}.exe` (requires internet)
          3. **Portable**: Run `KBQV-Portable-${{ needs.build.outputs.version }}.exe` directly
          
          ### 📋 Notes
          - Installer automatically downloads the latest version from GitHub
          - Main program built with PyInstaller onedir for better compatibility
          - Portable version built with PyInstaller onefile (may trigger security software)
          - All builds are automated using build_all.ps1 script
          
          ### 🔗 Links
          - **Repository**: https://github.com/${{ github.repository }}
          - **Releases**: https://github.com/${{ github.repository }}/releases
          
          ### 📝 Changelog
          ${{ steps.changelog.outputs.full_changelog }}
        files: |
          ./dist/KBQV-Installer-*.exe
          ./dist/KBQV-Portable-*.exe
          ./dist/KBQV-v*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
